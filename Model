#Model
____________________________________________________________________________

us_data = {
    "Year": [2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024],
    "Tax_Revenue_GDP": [10.46,10.90,11.18,10.85,11.50,9.93,9.88,10.15,11.39,12.60,10.65],
    "LFPR": [68.754,68.638,68.794,68.715,68.715,68.821,67.396,67.359,67.551,67.552,67.369],
    "Inflation": [1.622222977,0.118627136,1.261583206,2.130110004,2.442583297,1.812210075,1.233584396,4.697858864,8.002799821,4.116338384,2.949525205],
    "Unemployment": [7.375,6.168,5.28,4.869,4.355,3.896,3.669,8.055,5.349,3.65,3.638],
    "Informal_Employment_Rate": [18.0,17.6,17.3,17.1,16.8,16.5,16.2,15.9,15.7,15.5,None],
    "Nighttime_Light": [5.2,5.5,5.8,6.1,6.4,6.7,6.5,6.6,6.7,6.8,6.9]
}

us_df = pd.DataFrame(us_data)
us_df = us_df.dropna()  # Drop row with missing Informal Employment Rate for 2024

us_df.head()

X = us_df[["Tax_Revenue_GDP", "LFPR", "Inflation", "Unemployment"]]
Y = us_df["Informal_Employment_Rate"]

X = sm.add_constant(X)
model = sm.OLS(Y, X).fit()
model.summary()

___________________________________________________________________________

import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression

us_data = {
    'Year': list(range(2014, 2024)),
    'TaxRev': [10.46, 10.90, 11.18, 10.85, 11.50, 9.93, 9.88, 10.15, 11.39, 12.60],
    'LFPR': [68.754, 68.638, 68.794, 68.715, 68.715, 68.821, 67.396, 67.359, 67.551, 67.552],
    'Inflation': [1.62, 0.12, 1.26, 2.13, 2.44, 1.81, 1.23, 4.70, 8.00, 4.12],
    'Unemployment': [7.38, 6.17, 5.28, 4.87, 4.36, 3.90, 3.67, 8.06, 5.35, 3.65],
    'InformalEmpRate': [18.0, 17.6, 17.3, 17.1, 16.8, 16.5, 16.2, 15.9, 15.7, 15.5]
}

us_df = pd.DataFrame(us_data)

X = us_df[['TaxRev', 'LFPR', 'Inflation', 'Unemployment']]
y = us_df['InformalEmpRate']

model = LinearRegression().fit(X, y)
predicted_shadow = model.predict(X)

r_squared = model.score(X, y)

coefficients = model.coef_
intercept = model.intercept_

output = {
    'R_squared': r_squared * 100,
    'Coefficients': {
        'TaxRev': coefficients[0],
        'LFPR': coefficients[1],
        'Inflation': coefficients[2],
        'Unemployment': coefficients[3]
    },
    'Intercept': intercept,
    'Predicted_Shadow_Employment_Rate': predicted_shadow.tolist(),
    'Actual_Shadow_Employment_Rate': y.tolist(),
    'Years': us_df['Year'].tolist()
}

output

___________________________________________________________________________

china_data = {
    'Year': list(range(2014, 2024)),
    'TaxRev': [9.73, 9.50, 9.19, 8.95, 9.25, 8.89, 8.33, 7.92, 7.80, 7.52],
    'LFPR': [76.35, 75.88, 75.33, 74.65, 73.95, 73.38, 71.92, 72.92, 71.59, 71.60],
    'Inflation': [0.45, 1.25, 0.72, 0.69, 0.36, -1.11, 2.43, 4.09, 5.28, 4.39],
    'Unemployment': [4.10, 4.00, 3.90, 4.93, 5.15, 5.61, 5.11, 4.82, 4.53, 4.24],
    'GDPGrowth': [7.46, 6.98, 6.77, 6.89, 6.76, 6.07, 2.34, 8.57, 3.13, 5.41],
    'InformalEmpRate': [61.2, 60.8, 60.1, 59.3, 58.5, 57.6, 56.8, 55.9, 55.0, 54.4],
    'SelfEmpRate': [50.2, 49.8, 48.9, 48.1, 47.5, 46.9, 46.2, 45.8, 45.5, 45.3],
    'NightLights': [5.2, 5.5, 5.8, 6.1, 6.4, 6.7, 6.5, 6.6, 6.7, 6.8]
}

china_df = pd.DataFrame(china_data)

# X_c (causes)
X_c = china_df[['TaxRev', 'LFPR', 'Inflation', 'Unemployment', 'GDPGrowth']]
max_nl = china_df['NightLights'].max()
scaled_night_lights = (china_df['NightLights'] / max_nl) * 100

y_c = (china_df['InformalEmpRate'] + china_df['SelfEmpRate'] + scaled_night_lights) / 3

model_c = LinearRegression().fit(X_c, y_c)
predicted_shadow_c = model_c.predict(X_c)
r_squared_c = model_c.score(X_c, y_c)

coefficients_c = model_c.coef_
intercept_c = model_c.intercept_

output_c = {
    'R_squared': r_squared_c * 100,
    'Coefficients': {
        'TaxRev': coefficients_c[0],
        'LFPR': coefficients_c[1],
        'Inflation': coefficients_c[2],
        'Unemployment': coefficients_c[3],
        'GDPGrowth': coefficients_c[4]
    },
    'Intercept': intercept_c,
    'Predicted_Shadow_Economy': predicted_shadow_c.tolist(),
    'Actual_Composite_Indicator': y_c.tolist(),
    'Years': china_df['Year'].tolist()
}

output_c
