GDP vs Shadow Economy 

years = list(range(2014, 2025))
gdp_trillions = [17.608, 18.295, 18.805, 19.612, 20.657, 21.54, 21.354, 23.681, 26.007, 27.721, 29.185]
shadow_economy_percent = [8.7, 8.5, 8.2, 8.1, 8.1, 7.9, 7.8, 7.7, 7.6, 7.5, None]  # 2024 missing

df = pd.DataFrame({
    'Year': years,
    'GDP (Trillions USD)': gdp_trillions,
    'Shadow Economy (% of GDP)': shadow_economy_percent
})

fig, ax1 = plt.subplots(figsize=(10, 6))

color_gdp = 'tab:blue'
ax1.set_xlabel('Year')
ax1.set_ylabel('GDP (Trillions USD)', color=color_gdp)
ax1.plot(df['Year'], df['GDP (Trillions USD)'], color=color_gdp, marker='o', label='GDP (Trillions USD)')
ax1.tick_params(axis='y', labelcolor=color_gdp)
ax1.grid(True)

ax2 = ax1.twinx()
color_shadow = 'tab:red'
ax2.set_ylabel('Shadow Economy (% of GDP)', color=color_shadow)
ax2.plot(df['Year'][:-1], df['Shadow Economy (% of GDP)'][:-1], color=color_shadow, marker='x', linestyle='--', label='Shadow Economy (% of GDP)')
ax2.tick_params(axis='y', labelcolor=color_shadow)

plt.title('US GDP and Shadow Economy (% of GDP) (2014-2023)')
fig.tight_layout()

plt.show()
______________________________________________________________________________________________________________________________________________________

import plotly.graph_objects as go
import pandas as pd

data = {
    "year": [2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023],
    "GDP(Trillions_USD)": [17.608, 18.295, 18.805, 19.612, 20.657, 21.54, 21.354, 23.681, 26.007, 27.721],
    "Shadow_Economy_percent": [8.7, 8.5, 8.2, 8.1, 8.1, 7.9, 7.8, 7.7, 7.6, 7.5]
}
df = pd.DataFrame(data)

gdp_trace = go.Scatter(
    x=df['year'], y=df['GDP(Trillions_USD)'], 
    mode='lines+markers',
    name='GDP (tril USD)',
    marker=dict(symbol='circle', color='#1FB8CD', size=8, line=dict(width=2, color='#1FB8CD')),
    line=dict(color='#1FB8CD', width=3),
    cliponaxis=False,
    yaxis='y1',
    hovertemplate='Year: %{x}<br>GDP: %{y}T'
)

shadow_trace = go.Scatter(
    x=df['year'], y=df['Shadow_Economy_percent'],
    mode='lines+markers',
    name='Shadow % GDP',
    marker=dict(symbol='x', color='#DB4545', size=8, line=dict(width=2, color='#DB4545')),
    line=dict(color='#DB4545', width=3, dash='dash'),
    cliponaxis=False,
    yaxis='y2',
    hovertemplate='Year: %{x}<br>Shadow: %{y}%'
)

fig = go.Figure([gdp_trace, shadow_trace])

fig.update_layout(
    title='US GDP & Shadow GDP % 2014-2023',
    xaxis=dict(title='Year', tickmode='array', tickvals=df['year']),
    yaxis=dict(title='GDP (tril USD)', tickformat='.2f'),
    yaxis2=dict(title='Shadow (%)', overlaying='y', side='right'),
)
fig.update_xaxes(tickvals=df['year'], title_text='Year', showgrid=True)
fig.update_yaxes(title_text='GDP (tril USD)', showgrid=True, secondary_y=False)
fig.update_yaxes(title_text='Shadow (%)', showgrid=False, secondary_y=True)

fig.update_layout(
    legend=dict(orientation='h', yanchor='bottom', y=1.05, xanchor='center', x=0.5)
)

fig.write_image('us_gdp_shadow_2014_2023.png')

______________________________________________________________________________________________________________________________________________________

years = list(range(2014, 2025))
gdp_trillions = [17.608, 18.295, 18.805, 19.612, 20.657, 21.54, 21.354, 23.681, 26.007, 27.721, 29.185]
shadow_economy_percent = [8.7, 8.5, 8.2, 8.1, 8.1, 7.9, 7.8, 7.7, 7.6, 7.5, None]

import numpy as np
shadow_economy_percent[-1] = np.nan

fig, ax1 = plt.subplots(figsize=(10,6))

color = 'tab:blue'
ax1.set_xlabel('Year')
ax1.set_ylabel('GDP (Trillions USD)', color=color)
ax1.plot(years, gdp_trillions, color=color, marker='o', label='GDP (Trillions USD)')
ax1.tick_params(axis='y', labelcolor=color)
ax1.set_xticks(years)

ax2 = ax1.twinx()
color = 'tab:red'
ax2.set_ylabel('Shadow Economy (% of GDP)', color=color)
ax2.plot(years, shadow_economy_percent, color=color, marker='x', linestyle='dashed', label='Shadow Economy (% of GDP)')
ax2.tick_params(axis='y', labelcolor=color)

plt.title('US GDP and Shadow Economy Trends (2014-2024)')
fig.tight_layout()

lines1, labels1 = ax1.get_legend_handles_labels()
lines2, labels2 = ax2.get_legend_handles_labels()
ax1.legend(lines1 + lines2, labels1 + labels2, loc='upper left')

plt.show()

______________________________________________________________________________________________________________________________________________________

