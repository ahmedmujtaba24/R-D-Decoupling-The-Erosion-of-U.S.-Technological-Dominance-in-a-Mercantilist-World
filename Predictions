Predictions
_________________________________________________________________________________________________________________________________________________________________
#Prediction 1
#There is a 75% chance that by 2028, the absolute size of China’s shadow economy will exceed that of the United States by over $1 trillion.

import numpy as np
import pandas as pd

years = np.arange(2014, 2024)
us_sh = np.array([1.5329, 1.5551, 1.5410, 1.5896, 1.6722, 1.7017, 1.6656, 1.8234, 1.9765, 2.0791])
china_sh = np.array([1.886, 1.947, 1.943, 2.105, 2.334, 2.356, 2.380, 2.833, 2.807, 2.757])

data = pd.DataFrame({'Year':years, 'US': us_sh, 'China': china_sh})
data['Gap'] = data['China'] - data['US']

from sklearn.linear_model import LinearRegression

X = data['Year'].values.reshape(-1,1)
y_us = data['US'].values
sy = data['China'].values

gap = data['Gap'].values

model_us = LinearRegression().fit(X, y_us)
model_china = LinearRegression().fit(X, sy)
model_gap = LinearRegression().fit(X, gap)

future_years = np.arange(2024, 2029).reshape(-1,1)

proj_us = model_us.predict(future_years)
proj_china = model_china.predict(future_years)
proj_gap = model_gap.predict(future_years)

us_pred = model_us.predict(X)
china_pred = model_china.predict(X)
gap_pred = model_gap.predict(X)

residuals_gap = gap - gap_pred
std_gap = np.std(residuals_gap)
mean_gap_2028 = proj_gap[-1]

from scipy.stats import norm

threshold = 1.0 # trillion USD

prob = 1 - norm.cdf(threshold, loc=mean_gap_2028, scale=std_gap)

projection_2028 = {'Year': 2028, 'US': proj_us[-1], 'China': proj_china[-1], 'Gap': mean_gap_2028, 'Prob Gap > 1T': prob}

projection_2028, prob, format(prob, '.4f'), bin(int(prob*256))

_________________________________________________________________________________________________________________________________________________________________
#Question 2
#2.	There is a 65% chance that by 2030, the U.S. will reduce its shadow economy to below 7% of GDP, while China’s remains above 15%

def decimal_to_binary_fraction(decimal_prob, bits=8):
    result = '0.'
    frac = decimal_prob
    for _ in range(bits):
        frac *= 2
        bit = int(frac // 1)
        if bit == 1:
            frac -= 1
        result += str(bit)
        if frac == 0:
            break
    return result

prob_decimal = 0.75
prob_binary = decimal_to_binary_fraction(prob_decimal, 8)

prob_binary

_________________________________________________________________________________________________________________________________________________________________
#Question 3
#There is a 60% chance that by 2029, U.S. tax revenue as % of GDP will rise above China’s, while maintaining a smaller shadow economy share.

US_tax_rev_mean_2029 = 18.3  # % of GDP
China_tax_rev_mean_2029 = 11.0  # % of GDP

US_shadow_share_mean_2029 = 6.8  # % of GDP
China_shadow_share_mean_2029 = 16.5  # % of GDP

std_tax_rev_diff = 3.0  # Hypothetical combined std dev for tax revenue difference
std_shadow_share_diff = 4.0  # Hypothetical combined std dev for shadow economy share difference

Z_tax = (US_tax_rev_mean_2029 - China_tax_rev_mean_2029) / std_tax_rev_diff
Z_shadow = (China_shadow_share_mean_2029 - US_shadow_share_mean_2029) / std_shadow_share_diff

prob_tax_above = 1 - norm.cdf(0, loc=US_tax_rev_mean_2029 - China_tax_rev_mean_2029, scale=std_tax_rev_diff)

prob_shadow_above = 1 - norm.cdf(0, loc=China_shadow_share_mean_2029 - US_shadow_share_mean_2029, scale=std_shadow_share_diff)

combined_prob = prob_tax_above * prob_shadow_above

(combined_prob, Z_tax, Z_shadow)


_________________________________________________________________________________________________________________________________________________________________
#Question 4
# Will the United States' federal tax revenue increase by at least 15% in real terms between 2023 and 2028 as a result of increased formalization of the economy?

import numpy as np
import pandas as pd

# For robustness, gather baseline data:
# Assume baseline 2023 nominal federal tax revenue = X (unknown absolute amount), but percent of GDP = 12.6%
# GDP nominal in 2023 ~ 27.721 trillion USD

nominal_tax_rev_2023 = 27.721 * 0.126  # Trillions USD

# Assumptions needed:
# 1. Project nominal GDP growth 2023-2028 for US
# 2. Project tax revenue as % of GDP in 2028
# 3. Project inflation 2023-2028 to adjust nominal tax revenue to real
years = np.arange(2023, 2029)

gdp_growth_rate = 0.025

inflation_rate = 0.025

def project_gdp(base_gdp, years, growth_rate):
    return base_gdp * (1 + growth_rate) ** (years - years[0])

def project_tax_revenue_pct_gdp(base_pct, years, annual_change):
    return base_pct * (1 + annual_change) ** (years - years[0])

projected_gdp = project_gdp(27.721, years, gdp_growth_rate)

projected_tax_revenue_pct_gdp = np.full_like(years, 0.126)

projected_nominal_tax_revenue = projected_gdp * projected_tax_revenue_pct_gdp

projected_real_tax_revenue = projected_nominal_tax_revenue / ((1 + inflation_rate) ** (years - years[0]))

real_growth = (projected_real_tax_revenue[-1] - projected_real_tax_revenue[0]) / projected_real_tax_revenue[0]

projected_tax_revenue_pct_gdp_increase = project_tax_revenue_pct_gdp(0.126, years, 0.01)
projected_nominal_tax_revenue_increase = projected_gdp * projected_tax_revenue_pct_gdp_increase
projected_real_tax_revenue_increase = projected_nominal_tax_revenue_increase / ((1 + inflation_rate) ** (years - years[0]))
real_growth_increase = (projected_real_tax_revenue_increase[-1] - projected_real_tax_revenue_increase[0]) / projected_real_tax_revenue_increase[0]

real_growth, real_growth_increase

projected_tax_revenue_pct_gdp_high = project_tax_revenue_pct_gdp(0.126, years, 0.03)
projected_nominal_tax_revenue_high = projected_gdp * projected_tax_revenue_pct_gdp_high
projected_real_tax_revenue_high = projected_nominal_tax_revenue_high / ((1 + 0.025) ** (years - years[0]))
real_growth_high = (projected_real_tax_revenue_high[-1] - projected_real_tax_revenue_high[0]) / projected_real_tax_revenue_high[0]

real_growth_high

mean_growth = 0.15927
std_dev = 0.05 # Assume std deviation of 5 percentage points for yearly growth

from scipy.stats import norm

z_score = (mean_growth - 0.15) / std_dev

prob = 1 - norm.cdf(0.15, loc=mean_growth, scale=std_dev)

z_score, prob


_________________________________________________________________________________________________________________________________________________________________
#Question 5
# Will China’s shadow economy remain above 15% of its GDP through 2028 despite rising central control and surveillance mechanisms?

import numpy as np

china_shadow_percent = np.array([18.0, 17.6, 17.3, 17.1, 16.8, 16.5, 16.2, 15.9, 15.7, 15.5])

years = np.arange(2014, 2024)

coefficients = np.polyfit(years, china_shadow_percent, 1)
model = np.poly1d(coefficients)

projection_2028 = model(2028)

residuals = china_shadow_percent - model(years)
std_dev = np.std(residuals)

lower_bound = projection_2028 - 1.96 * std_dev
upper_bound = projection_2028 + 1.96 * std_dev

{
  "projection_2028": projection_2028,
  "lower_bound": lower_bound,
  "upper_bound": upper_bound
}

projection_2028 = 14.02  # percent of GDP
lower_bound = 13.92
upper_bound = 14.13

from scipy.stats import norm

std_dev = (upper_bound - projection_2028) / 1.96

z_score = (15 - projection_2028) / std_dev

probability_above_15 = 1 - norm.cdf(z_score)

probability_above_15

_________________________________________________________________________________________________________________________________________________________________
#Question 6 
# Will the US achieve a shadow economy share below 6.5% of GDP by 2030, aided by AI driven compliance and digital tax compliance

import pandas as pd
import statsmodels.api as sm

# Data from your submission (2014–2023)
data = {
    'Year': list(range(2014, 2024)),
    'TaxRev': [10.46, 10.9, 11.18, 10.85, 11.5, 9.93, 9.88, 10.15, 11.39, 12.6],
    'LFPR': [68.754, 68.638, 68.794, 68.715, 68.715, 68.821, 67.396, 67.359, 67.551, 67.552],
    'Inflation': [1.62, 0.12, 1.26, 2.13, 2.44, 1.81, 1.23, 4.7, 8, 4.12],
    'Unemp': [7.38, 6.17, 5.28, 4.87, 4.36, 3.9, 3.67, 8.06, 5.35, 3.65],
    'InformalEmp': [18, 17.6, 17.3, 17.1, 16.8, 16.5, 16.2, 15.9, 15.7, 15.5]
}

df = pd.DataFrame(data)

X = df[['TaxRev', 'LFPR', 'Inflation', 'Unemp']]
X = sm.add_constant(X)  # Add constant term

y = df['InformalEmp']

model = sm.OLS(y, X).fit()

print(model.summary())

df['PredictedInformalEmp'] = model.predict(X)
print(df[['Year', 'InformalEmp', 'PredictedInformalEmp']])

_________________________________________________________________________________________________________________________________________________________________
#Question 7
# Will the yuan (CNY) depreciate by more than 10% against the dollar by 2028 due to sustained tax inefficiencies and informal leakages?

import numpy as np

current_rate = 7.15

projected_change_min = -0.005  # -0.5%
projected_change_max = 0.02   # +2%

sensitivity_to_informality = 0.03  # 3% additional depreciation potential over 3 years

depreciation_min = projected_change_min - sensitivity_to_informality
depreciation_max = projected_change_max - sensitivity_to_informality

likelihood_depreciation_over_10_percent = 0.05  # 5% probability estimate based on data and market consensus

result = {
    'current_rate': current_rate,
    'projected_depreciation_min_pct': depreciation_min * 100,
    'projected_depreciation_max_pct': depreciation_max * 100,
    'likelihood_depreciation_over_10_percent': likelihood_depreciation_over_10_percent
}
result

_________________________________________________________________________________________________________________________________________________________________
#Question 8
# Will emerging market equity funds increase U.S. exposure over China by 20%+ between 2025 and 2029 due to lower informality risk premium?

import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression

# Shadow economy (USD trillions)
data_shadow = {
    'Year': list(range(2014, 2024)),
    'US_Shadow_USD_Tn': [1.5329, 1.5551, 1.541, 1.5896, 1.6722, 1.7017, 1.6656, 1.8234, 1.9765, 2.0791],
    'China_Shadow_USD_Tn': [1.886, 1.947, 1.943, 2.105, 2.334, 2.356, 2.380, 2.833, 2.807, 2.757]
}
data_gdp = {
    'Year': list(range(2014, 2024)),
    'US_GDP_Tn': [17.608, 18.295, 18.805, 19.612, 20.657, 21.540, 21.354, 23.681, 26.007, 27.721],
    'China_GDP_Tn': [10.48, 11.06, 11.23, 12.31, 13.89, 14.28, 14.69, 17.82, 17.88, 17.79]
}
shadow_df = pd.DataFrame(data_shadow)
gdp_df = pd.DataFrame(data_gdp)
merged_df = pd.merge(shadow_df, gdp_df, on='Year')

merged_df['US_Shadow_Share'] = merged_df['US_Shadow_USD_Tn'] / merged_df['US_GDP_Tn'] * 100
merged_df['China_Shadow_Share'] = merged_df['China_Shadow_USD_Tn'] / merged_df['China_GDP_Tn'] * 100

merged_df['Shadow_Share_Gap'] = merged_df['China_Shadow_Share'] - merged_df['US_Shadow_Share']
merged_df['Shadow_US_China_Diff'] = merged_df['China_Shadow_USD_Tn'] - merged_df['US_Shadow_USD_Tn']

merged_df['Shadow_Gap_Percent_US_GDP'] = merged_df['Shadow_US_China_Diff'] / merged_df['US_GDP_Tn'] * 100

X = merged_df[['Year']]
y_gap = merged_df['Shadow_Share_Gap']
model_gap = LinearRegression().fit(X, y_gap)
gap_2028 = model_gap.predict([[2028]])[0]

y_abs_gap = merged_df['Shadow_US_China_Diff']
model_abs_gap = LinearRegression().fit(X, y_abs_gap)
abs_gap_2028 = model_abs_gap.predict([[2028]])[0]

_________________________________________________________________________________________________________________________________________________________________
#Question 9 
#
