Predictions
_________________________________________________________________________________________________________________________________________________________________
#Prediction 1
#There is a 75% chance that by 2028, the absolute size of China’s shadow economy will exceed that of the United States by over $1 trillion.

import numpy as np
import pandas as pd

years = np.arange(2014, 2024)
us_sh = np.array([1.5329, 1.5551, 1.5410, 1.5896, 1.6722, 1.7017, 1.6656, 1.8234, 1.9765, 2.0791])
china_sh = np.array([1.886, 1.947, 1.943, 2.105, 2.334, 2.356, 2.380, 2.833, 2.807, 2.757])

data = pd.DataFrame({'Year':years, 'US': us_sh, 'China': china_sh})
data['Gap'] = data['China'] - data['US']

from sklearn.linear_model import LinearRegression

X = data['Year'].values.reshape(-1,1)
y_us = data['US'].values
sy = data['China'].values

gap = data['Gap'].values

model_us = LinearRegression().fit(X, y_us)
model_china = LinearRegression().fit(X, sy)
model_gap = LinearRegression().fit(X, gap)

future_years = np.arange(2024, 2029).reshape(-1,1)

proj_us = model_us.predict(future_years)
proj_china = model_china.predict(future_years)
proj_gap = model_gap.predict(future_years)

us_pred = model_us.predict(X)
china_pred = model_china.predict(X)
gap_pred = model_gap.predict(X)

residuals_gap = gap - gap_pred
std_gap = np.std(residuals_gap)
mean_gap_2028 = proj_gap[-1]

from scipy.stats import norm

threshold = 1.0 # trillion USD

prob = 1 - norm.cdf(threshold, loc=mean_gap_2028, scale=std_gap)

projection_2028 = {'Year': 2028, 'US': proj_us[-1], 'China': proj_china[-1], 'Gap': mean_gap_2028, 'Prob Gap > 1T': prob}

projection_2028, prob, format(prob, '.4f'), bin(int(prob*256))

_________________________________________________________________________________________________________________________________________________________________
#Question 2
#2.	There is a 65% chance that by 2030, the U.S. will reduce its shadow economy to below 7% of GDP, while China’s remains above 15%

def decimal_to_binary_fraction(decimal_prob, bits=8):
    result = '0.'
    frac = decimal_prob
    for _ in range(bits):
        frac *= 2
        bit = int(frac // 1)
        if bit == 1:
            frac -= 1
        result += str(bit)
        if frac == 0:
            break
    return result

prob_decimal = 0.75
prob_binary = decimal_to_binary_fraction(prob_decimal, 8)

prob_binary

_________________________________________________________________________________________________________________________________________________________________
#Question 3
#There is a 60% chance that by 2029, U.S. tax revenue as % of GDP will rise above China’s, while maintaining a smaller shadow economy share.

US_tax_rev_mean_2029 = 18.3  # % of GDP
China_tax_rev_mean_2029 = 11.0  # % of GDP

US_shadow_share_mean_2029 = 6.8  # % of GDP
China_shadow_share_mean_2029 = 16.5  # % of GDP

std_tax_rev_diff = 3.0  # Hypothetical combined std dev for tax revenue difference
std_shadow_share_diff = 4.0  # Hypothetical combined std dev for shadow economy share difference

Z_tax = (US_tax_rev_mean_2029 - China_tax_rev_mean_2029) / std_tax_rev_diff
Z_shadow = (China_shadow_share_mean_2029 - US_shadow_share_mean_2029) / std_shadow_share_diff

prob_tax_above = 1 - norm.cdf(0, loc=US_tax_rev_mean_2029 - China_tax_rev_mean_2029, scale=std_tax_rev_diff)

prob_shadow_above = 1 - norm.cdf(0, loc=China_shadow_share_mean_2029 - US_shadow_share_mean_2029, scale=std_shadow_share_diff)

combined_prob = prob_tax_above * prob_shadow_above

(combined_prob, Z_tax, Z_shadow)


_________________________________________________________________________________________________________________________________________________________________
#Question 4
# Will the United States' federal tax revenue increase by at least 15% in real terms between 2023 and 2028 as a result of increased formalization of the economy?

import numpy as np
import pandas as pd

# For robustness, gather baseline data:
# Assume baseline 2023 nominal federal tax revenue = X (unknown absolute amount), but percent of GDP = 12.6%
# GDP nominal in 2023 ~ 27.721 trillion USD

nominal_tax_rev_2023 = 27.721 * 0.126  # Trillions USD

# Assumptions needed:
# 1. Project nominal GDP growth 2023-2028 for US
# 2. Project tax revenue as % of GDP in 2028
# 3. Project inflation 2023-2028 to adjust nominal tax revenue to real
years = np.arange(2023, 2029)

gdp_growth_rate = 0.025

inflation_rate = 0.025

def project_gdp(base_gdp, years, growth_rate):
    return base_gdp * (1 + growth_rate) ** (years - years[0])

def project_tax_revenue_pct_gdp(base_pct, years, annual_change):
    return base_pct * (1 + annual_change) ** (years - years[0])

projected_gdp = project_gdp(27.721, years, gdp_growth_rate)

projected_tax_revenue_pct_gdp = np.full_like(years, 0.126)

projected_nominal_tax_revenue = projected_gdp * projected_tax_revenue_pct_gdp

projected_real_tax_revenue = projected_nominal_tax_revenue / ((1 + inflation_rate) ** (years - years[0]))

real_growth = (projected_real_tax_revenue[-1] - projected_real_tax_revenue[0]) / projected_real_tax_revenue[0]

projected_tax_revenue_pct_gdp_increase = project_tax_revenue_pct_gdp(0.126, years, 0.01)
projected_nominal_tax_revenue_increase = projected_gdp * projected_tax_revenue_pct_gdp_increase
projected_real_tax_revenue_increase = projected_nominal_tax_revenue_increase / ((1 + inflation_rate) ** (years - years[0]))
real_growth_increase = (projected_real_tax_revenue_increase[-1] - projected_real_tax_revenue_increase[0]) / projected_real_tax_revenue_increase[0]

real_growth, real_growth_increase

